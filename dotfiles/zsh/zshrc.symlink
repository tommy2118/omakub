# Shortcut to dotfiles path
export DOTHOME="$HOME/.dotfiles"

# Source directory for projects
export SOURCE_DIR="$HOME/src"

# Collect all `.zsh` files for loading
typeset -U config_files
config_files=($DOTHOME/**/*.zsh)

# Load path-related files
for file in ${(M)config_files:#*/path.zsh}; do
  source "$file"
done

# Load all files except path and completion scripts
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  source "$file"
done

# Initialize autocomplete here to ensure functions are loaded
autoload -Uz compinit
compinit

# Load completion files
for file in ${(M)config_files:#*/completion.zsh}; do
  source "$file"
done

unset config_files

# Allow [ and ] for globbing
unsetopt nomatch

# Autocompletion for commonly visited directories
cdpath=(. ~ ~/src $SOURCE_DIR)

# Add paths for Go, Rust, and others
export PATH="$HOME/.cargo/bin:$PATH"

# Load `chruby` for managing Ruby versions
if [[ -a /usr/local/opt/chruby/share/chruby/chruby.sh ]]; then
  source /usr/local/opt/chruby/share/chruby/chruby.sh
  source /usr/local/opt/chruby/share/chruby/auto.sh
elif [[ -a /opt/homebrew/opt/chruby/share/chruby/chruby.sh ]]; then
  source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
  source /opt/homebrew/opt/chruby/share/chruby/auto.sh
elif [[ -a /usr/local/share/chruby/chruby.sh ]]; then
  source /usr/local/share/chruby/chruby.sh
  source /usr/local/share/chruby/auto.sh
fi

# Load fzf if installed
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Load nvm for Node.js
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && source "/usr/local/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && source "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && source "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"

# Configure paths and flags for macOS (Homebrew) or Linux
if [[ -d /opt/homebrew/opt ]]; then
  export PATH="/opt/homebrew/bin:/opt/homebrew/opt/openssl@1.1/bin:$PATH"
  export PATH="/opt/homebrew/sbin:$PATH"
  export CPPFLAGS="-I/opt/homebrew/opt/libffi/include -I/opt/homebrew/opt/openssl@1.1/include -I/opt/homebrew/opt/readline/include -I/opt/homebrew/opt/binutils/include"
  export LDFLAGS="-L/opt/homebrew/opt/bison/lib -L/opt/homebrew/opt/libffi/lib -L/opt/homebrew/opt/openssl@1.1/lib -L/opt/homebrew/opt/readline/lib -L/opt/homebrew/opt/binutils/lib"
  export PKG_CONFIG_PATH="/opt/homebrew/opt/libffi/lib/pkgconfig:/opt/homebrew/opt/openssl@1.1/lib/pkgconfig:/opt/homebrew/opt/readline/lib/pkgconfig"
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/opt/homebrew/opt/openssl@1.1"
else
  export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
  export CPPFLAGS="-I/usr/local/opt/libffi/include -I/usr/local/opt/openssl@1.1/include -I/usr/local/opt/readline/include -I/usr/local/opt/binutils/include"
  export LDFLAGS="-L/usr/local/opt/bison/lib -L/usr/local/opt/libffi/lib -L/usr/local/opt/openssl@1.1/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/binutils/lib"
  export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig:/usr/local/opt/readline/lib/pkgconfig"
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/usr/local/opt/openssl@1.1"
fi

# Set Docker platform based on system architecture
export DOCKER_PLATFORM="linux/$(uname -m)"

# Source local Zsh customizations, if present
local_zshrc="$HOME/.zshrc.local"
[ -f "$local_zshrc" ] && source "$local_zshrc"
